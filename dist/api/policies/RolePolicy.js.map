{"version":3,"sources":["policies/RolePolicy.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;AAKb,IAAM,CAAC,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;;;;;;;;;;;;;;AAc5B,MAAM,CAAC,OAAO,GAAG,UAAS,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE;AACtC,QAAM,WAAW,GAAG,GAAG,CAAC,WAAW,CAAC;AACpC,QAAM,SAAS,GAAG,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;AACrD,QAAM,MAAM,GAAG,iBAAiB,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;;;AAGvD,QAAI,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;AAC5B,eAAO,IAAI,EAAE,CAAC;KACjB;;AAED,QAAI,GAAG,CAAC,OAAO,CAAC,YAAY,EAAE;AAC1B,eAAO,IAAI,EAAE,CAAC;KACjB;;;;;;;;AAQD,QAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,QAAQ,EAAE,QAAQ,CAAC,EAAE,MAAM,CAAC,IAAI,GAAG,CAAC,OAAO,CAAC,eAAe,CAAC,UAAU,CAAC,KAAK,EAAE;;;;;AAK3F,WAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,IAAI,EAAE,CAAC;AAC5B,WAAG,CAAC,MAAM,CAAC,KAAK,GAAG,GAAG,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,KAAK,IAAI,EAAE,CAAC;;AAEhD,WAAG,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,GAAG,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;AACrC,WAAG,CAAC,KAAK,CAAC,KAAK,GAAG,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;;AAE9B,YAAI,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;AACtB,eAAG,CAAC,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;SAChC;KACJ;;AAED,qBAAiB,CAAC,iBAAiB,CAAC,GAAG,CAAC,CACnC,IAAI,CAAC,UAAS,OAAO,EAAE;;AAEpB,eAAO,iBAAiB,CAAC,wBAAwB,CAAC,OAAO,EAAE,GAAG,CAAC,IAAI,EAAE,MAAM,EAAE,YAAY,CAAC,kBAAkB,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,IAAI,CAAC,CACvH,IAAI,CAAC,UAAS,kBAAkB,EAAE;AAC/B,gBAAI,kBAAkB,EAAE;AACpB,oBAAI,EAAE,CAAC;aACV,MAAM,IAAI,iBAAiB,CAAC,iBAAiB,CAAC,OAAO,EAAE,GAAG,CAAC,IAAI,CAAC,EAAE;AAC/D,mBAAG,CAAC,IAAI,CAAC,GAAG,EAAE;AACV,yBAAK,EAAE,yBAAyB,GAAG,MAAM,GAAG,qBAAqB;iBACpE,CAAC,CAAC;aACN,MAAM;AACH,oBAAI,EAAE,CAAC;aACV;;AAED,mBAAO,IAAI,CAAC;SACf,CAAC,CAAC;KACV,CAAC,SACI,CAAC,IAAI,CAAC,CAAC;CACpB,CAAC","file":"RolePolicy.js","sourcesContent":["\"use strict\";\n\n/*global PermissionService*/\n/*global ModelService*/\n\nconst _ = require(\"lodash\");\n\n/**\n * RolePolicy\n *\n * @class RolePolicy\n * @depends PermissionPolicy\n * @depends OwnerPolicy\n * @depends ModelPolicy\n *\n * Verify that User is satisfactorily related to the Object's owner.\n * By this point, we know we have some permissions related to the action and object\n * If they are 'owner' permissions, verify that the objects that are being accessed are owned by the current user\n */\nmodule.exports = function(req, res, next) {\n    const permissions = req.permissions;\n    const relations = _.groupBy(permissions, 'relation');\n    const action = PermissionService.getMethod(req.method);\n\n    // continue if there exist role Permissions which grant the asserted privilege\n    if (!_.isEmpty(relations.role)) {\n        return next();\n    }\n\n    if (req.options.unknownModel) {\n        return next();\n    }\n\n    /*\n     * This block allows us to filter reads by the owner attribute, rather than failing an entire request\n     * if some of the results are not owned by the user.\n     * We don't want to take this same course of action for an update or delete action, we would prefer to fail the entire request.\n     * There is no notion of 'create' for an owner permission, so it is not relevant here.\n     */\n    if (!_.includes(['update', 'delete'], action) && req.options.modelDefinition.attributes.owner) {\n        // Some parsing must happen on the query down the line,\n        // as req.query has no impact on the results from PermissionService.findTargetObjects.\n        // I had to look at the actionUtil parseCriteria method to see where to augment the criteria\n\n        req.query = req.query || {};\n        req.params.where = req.params.all().where || {};\n\n        req.params.where.owner = req.user.id;\n        req.query.owner = req.user.id;\n\n        if (_.isObject(req.body)) {\n            req.body.owner = req.user.id;\n        }\n    }\n\n    PermissionService.findTargetObjects(req)\n        .then(function(objects) {\n            // PermissionService.isAllowedToPerformAction checks if the user has 'user' based permissions (vs role or owner based permissions)\n            return PermissionService.isAllowedToPerformAction(objects, req.user, action, ModelService.getTargetModelName(req), req.body)\n                .then(function(hasUserPermissions) {\n                    if (hasUserPermissions) {\n                        next();\n                    } else if (PermissionService.hasForeignObjects(objects, req.user)) {\n                        res.send(403, {\n                            error: 'Cannot perform action [' + action + '] on foreign object'\n                        });\n                    } else {\n                        next();\n                    }\n\n                    return null;\n                });\n        })\n        .catch(next);\n};\n"]}