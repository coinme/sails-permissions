{"version":3,"sources":["policies/ModelPolicy.js"],"names":[],"mappings":";;AAAA,IAAI,CAAC,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;;;;;;AAM1B,SAAS,UAAU,CAAE,GAAG,EAAE;AACxB,SAAO,GAAG,CAAC,OAAO,CAAC,KAAK,IAAI,GAAG,CAAC,OAAO,CAAC,UAAU,CAAA;CACnD;;;;;AAKD,MAAM,CAAC,OAAO,GAAG,SAAS,WAAW,CAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE;AACrD,MAAI,UAAU,GAAG,KAAK,CAAC,KAAK,CAAC,WAAW,CAAC,WAAW,CAAC;AACrD,KAAG,CAAC,OAAO,CAAC,aAAa,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC;;AAE5C,MAAI,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE;AACxC,WAAO,IAAI,EAAE,CAAC;GACf;;AAED,KAAG,CAAC,OAAO,CAAC,eAAe,GAAG,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;AACtE,KAAG,CAAC,KAAK,GAAG,UAAU,CAAC,GAAG,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;;AAElD,MAAI,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE;AACpD,WAAO,IAAI,EAAE,CAAC;GACf;;AAED,OAAK,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,EAAE,GAAG,CAAC,OAAO,CAAC,aAAa,EAAE,4BAA4B,CAAC,CAAC;;;AAGnF,OAAK,CAAC,OAAO,CAAC,EAAE,QAAQ,EAAE,GAAG,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC,CACnD,IAAI,CAAC,UAAU,KAAK,EAAE;AACrB,QAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;AACtB,SAAG,CAAC,OAAO,CAAC,YAAY,GAAG,IAAI,CAAC;;AAEhC,WAAK,GAAG,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;KACjD;;AAED,OAAG,CAAC,KAAK,GAAG,KAAK,CAAC;AAClB,QAAI,EAAE,CAAC;GACR,CAAC,SACI,CAAC,IAAI,CAAC,CAAC;CAChB,CAAC","file":"ModelPolicy.js","sourcesContent":["var _ = require('lodash');\n\n/**\n * Simplified version of sails/lib/hooks/blueprints/actionUtil\n * see: https://github.com/balderdashy/sails/blob/b4eed1775d01f436b263362180eb3f8447af1b87/lib/hooks/blueprints/actionUtil.js#L302\n */\nfunction parseModel (req) {\n  return req.options.model || req.options.controller\n}\n\n/**\n * Query the Model that is being acted upon, and set it on the req object.\n */\nmodule.exports = function ModelPolicy (req, res, next) {\n  var modelCache = sails.hooks.permissions._modelCache;\n  req.options.modelIdentity = parseModel(req);\n\n  if (_.isEmpty(req.options.modelIdentity)) {\n    return next();\n  }\n\n  req.options.modelDefinition = sails.models[req.options.modelIdentity];\n  req.model = modelCache[req.options.modelIdentity];\n\n  if (_.isObject(req.model) && !_.isNull(req.model.id)) {\n    return next();\n  }\n\n  sails.log.warn('Model [', req.options.modelIdentity, '] not found in model cache');\n\n  // if the model is not found in the cache for some reason, get it from the database\n  Model.findOne({ identity: req.options.modelIdentity })\n    .then(function (model) {\n      if (!_.isObject(model)) {\n        req.options.unknownModel = true;\n\n        model = sails.models[req.options.modelIdentity];\n      }\n\n      req.model = model;\n      next();\n    })\n    .catch(next);\n};\n"]}