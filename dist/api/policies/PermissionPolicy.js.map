{"version":3,"sources":["policies/PermissionPolicy.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;;;;;;;;;;;;;;AAwBb,MAAM,CAAC,OAAO,GAAG,UAAS,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE;AACtC,QAAM,OAAO,GAAG;AACZ,aAAK,EAAE,GAAG,CAAC,KAAK;AAChB,cAAM,EAAE,GAAG,CAAC,MAAM;AAClB,YAAI,EAAE,GAAG,CAAC,IAAI;KACjB,CAAC;;AAEF,QAAI,GAAG,CAAC,OAAO,CAAC,YAAY,EAAE;AAC1B,eAAO,IAAI,EAAE,CAAC;KACjB;;AAED,qBAAiB,CACZ,oBAAoB,CAAC,OAAO,CAAC,CAC7B,IAAI,CAAC,UAAS,WAAW,EAAE;AACxB,aAAK,CAAC,GAAG,CAAC,KAAK,CAAC,mBAAmB,EAAE,WAAW,CAAC,MAAM,EAAE,mBAAmB,EACxE,GAAG,CAAC,MAAM,EAAE,IAAI,EAAE,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;;AAEhE,YAAI,CAAC,WAAW,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,EAAE;AAC1C,eAAG,CAAC,IAAI,CAAC,GAAG,EAAE,EAAC,KAAK,EAAE,iBAAiB,CAAC,eAAe,CAAC,OAAO,CAAC,EAAC,CAAC,CAAC;SACtE,MAAM;AACH,eAAG,CAAC,WAAW,GAAG,WAAW,CAAC;;AAE9B,gBAAI,EAAE,CAAC;SACV;;AAED,eAAO,IAAI,CAAC;KACf,CAAC,CAAC;CACV,CAAC","file":"PermissionPolicy.js","sourcesContent":["\"use strict\";\n\n/*global PermissionService*/\n\n/**\n * PermissionPolicy\n * @depends OwnerPolicy\n * @depends ModelPolicy\n *\n * In order to proceed to the controller, the following verifications\n * must pass:\n * 1. User is logged in (handled previously by sails-auth sessionAuth policy)\n * 2. User has Permission to perform action on Model\n * 3. User has Permission to perform action on Attribute (if applicable) [TODO]\n * 4. User is satisfactorily related to the Object's owner (if applicable)\n *\n * This policy verifies #1-2 here, before any controller is invoked. However\n * it is not generally possible to determine ownership relationship until after\n * the object has been queried. Verification of #4 occurs in RolePolicy.\n *\n * @param {Object}   req\n * @param {Object}   res\n * @param {Function} next\n */\nmodule.exports = function(req, res, next) {\n    const options = {\n        model: req.model,\n        method: req.method,\n        user: req.user\n    };\n\n    if (req.options.unknownModel) {\n        return next();\n    }\n\n    PermissionService\n        .findModelPermissions(options)\n        .then(function(permissions) {\n            sails.log.silly('PermissionPolicy:', permissions.length, 'permissions grant',\n                req.method, 'on', req.model.name, 'for', req.user.username);\n\n            if (!permissions || permissions.length === 0) {\n                res.send(403, {error: PermissionService.getErrorMessage(options)});\n            } else {\n                req.permissions = permissions;\n\n                next();\n            }\n\n            return null;\n        });\n};\n"]}