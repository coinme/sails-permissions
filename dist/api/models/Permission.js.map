{"version":3,"sources":["models/Permission.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,IAAM,CAAC,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;;;;;;;;AAQ5B,MAAM,CAAC,OAAO,GAAG;AACf,eAAa,EAAE,KAAK;;AAEpB,aAAW,EAAE,CACX,uEAAuE,EACvE,wEAAwE,EACxE,oCAAoC,CACrC,CAAC,IAAI,CAAC,GAAG,CAAC;;AAEX,YAAU,EAAE;;;;;AAKV,SAAK,EAAE;AACL,WAAK,EAAE,OAAO;AACd,cAAQ,EAAE,IAAI;KACf;;AAED,UAAM,EAAE;AACN,UAAI,EAAE,QAAQ;AACd,WAAK,EAAE,IAAI;AACX,aAAO,EAAE,IAAI;;;;;AAKb,cAAM,CACJ,QAAQ,EACR,MAAM,EACN,QAAQ,EACR,QAAQ,CACT;KACF;;AAED,YAAQ,EAAE;AACR,UAAI,EAAE,QAAQ;AACd,cAAM,CACJ,MAAM,EACN,OAAO,EACP,MAAM,CACP;AACD,gBAAU,EAAE,MAAM;AAClB,WAAK,EAAE,IAAI;KACZ;;;;;;AAMD,QAAI,EAAE;AACJ,WAAK,EAAE,MAAM;KAGd;;;;;;;;AAMD,QAAI,EAAE;AACJ,WAAK,EAAE,MAAM;;KAEd;;;;;;AAMD,YAAQ,EAAE;AACR,gBAAU,EAAE,UAAU;AACtB,SAAG,EAAE,YAAY;KAClB;GACF;;AAED,eAAa,EAAE,CACb,SAAS,4BAA4B,CAAE,UAAU,EAAE,IAAI,EAAE;AACvD,QAAI,UAAU,CAAC,QAAQ,IAAI,OAAO,IAAI,UAAU,CAAC,MAAM,IAAI,QAAQ,EAAE;AACnE,UAAI,CAAC,IAAI,KAAK,CAAC,6EAA6E,CAAC,CAAC,CAAC;KAChG;;AAED,QAAI,UAAU,CAAC,MAAM,KAAK,QAAQ,IAC1B,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,QAAQ,EAAE,UAAU,QAAQ,EAAE;AAAE,aAAO,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;KAAE,CAAC,CAAC,MAAM,EAAE;AAC5G,UAAI,CAAC,IAAI,KAAK,CAAC,qFAAqF,CAAC,CAAC,CAAC;KACxG;;AAED,QAAI,UAAU,CAAC,QAAQ,IAAI,MAAM,IAAI,UAAU,CAAC,IAAI,KAAK,EAAE,EAAE;AAC3D,UAAI,CAAC,IAAI,KAAK,CAAC,kEAAkE,CAAC,CAAC,CAAC;KACrF;;AAED,QAAI,UAAU,CAAC,QAAQ,IAAI,MAAM,IAAI,UAAU,CAAC,IAAI,KAAK,EAAE,EAAE;AAC3D,UAAI,CAAC,IAAI,KAAK,CAAC,kEAAkE,CAAC,CAAC,CAAC;KACrF;;AAED,QAAI,EAAE,CAAC;GACR,CACF;CACF,CAAC","file":"Permission.js","sourcesContent":["\"use strict\";\n\nconst _ = require('lodash');\n\n/**\n * @module Permission\n *\n * @description\n *   The actions a Role is granted on a particular Model and its attributes\n */\nmodule.exports = {\n  autoCreatedBy: false,\n\n  description: [\n    'Defines a particular `action` that a `Role` can perform on a `Model`.',\n    'A `User` can perform an `action` on a `Model` by having a `Role` which',\n    'grants the necessary `Permission`.'\n  ].join(' '),\n\n  attributes: {\n\n    /**\n     * The Model that this Permission applies to.\n     */\n    model: {\n      model: 'Model',\n      required: true\n    },\n\n    action: {\n      type: 'string',\n      index: true,\n      notNull: true,\n      /**\n       * TODO remove enum and support permissions based on all controller\n       * actions, including custom ones\n       */\n      enum: [\n        'create',\n        'read',\n        'update',\n        'delete'\n      ]\n    },\n\n    relation: {\n      type: 'string',\n      enum: [\n        'role',\n        'owner',\n        'user'\n      ],\n      defaultsTo: 'role',\n      index: true\n    },\n\n    /**\n     * The Role to which this Permission grants create, read, update, and/or\n     * delete privileges.\n     */\n    role: {\n      model: 'Role',\n      // Validate manually\n      //required: true\n    },\n\n    /**\n     * The User to which this Permission grants create, read, update, and/or\n     * delete privileges.\n     */\n    user: {\n      model: 'User'\n      // Validate manually\n    },\n\n    /**\n     * A list of criteria.  If any of the criteria match the request, the action is allowed.\n     * If no criteria are specified, it is ignored altogether.\n     */\n    criteria: {\n      collection: 'Criteria',\n      via: 'permission'\n    }\n  },\n\n  afterValidate: [\n    function validateOwnerCreateTautology (permission, next) {\n      if (permission.relation == 'owner' && permission.action == 'create') {\n        next(new Error('Creating a Permission with relation=owner and action=create is tautological'));\n      }\n\n      if (permission.action === 'delete' &&\n              _.filter(permission.criteria, function (criteria) { return !_.isEmpty(criteria.blacklist); }).length) {\n        next(new Error('Creating a Permission with an attribute blacklist is not allowed when action=delete'));\n      }\n\n      if (permission.relation == 'user' && permission.user === \"\") {\n        next(new Error('A Permission with relation user MUST have the user attribute set'));\n      }\n\n      if (permission.relation == 'role' && permission.role === \"\") {\n        next(new Error('A Permission with relation role MUST have the role attribute set'));\n      }\n\n      next();\n    }\n  ]\n};\n"]}