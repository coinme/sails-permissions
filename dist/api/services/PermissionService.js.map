{"version":3,"sources":["services/PermissionService.js"],"names":[],"mappings":"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","file":"PermissionService.js","sourcesContent":["\"use strict\";\n\n/*global PermissionService*/\n/*global Permission*/\n\nconst _ = require('lodash');\n\nconst methodMap = {\n    POST: 'create',\n    GET: 'read',\n    PUT: 'update',\n    DELETE: 'delete'\n};\n\nconst wlFilter = require('waterline-criteria');\n\n/**\n * @class PermissionService\n * @static\n * @global\n */\nmodule.exports = {\n\n    /**\n     * Given an object, or a list of objects, return true if the list contains\n     * objects not owned by the specified user.\n     */\n    hasForeignObjects: function(objects, user) {\n        if (_.isArray(objects)) {\n            return _.any(objects, (object) => PermissionService.hasForeignObjects(object, user));\n        }\n\n        let predicate = PermissionService.isForeignObject(user.id);\n\n        if (!_.isNil(objects.owner)) {\n            return predicate(objects);\n        }\n\n        let object = objects;\n\n        // It is an ember-blueprints object, maybe.\n        object = _.mapValues(object, (value, key) => {\n            if (_.isObject(value)) {\n                return [value];\n            } else if (_.isArray(value)) {\n                return value;\n            } else {\n                return undefined;\n            }\n        });\n\n        object = _.omitBy(object, _.isNil);\n\n        return !!_.find(object, (value, key) => {\n            if (_.isObject(value)) {\n                return predicate(value);\n            } else if (_.isArray(value)) {\n                return _.find(value, predicate);\n            } else {\n                throw new TypeError('Uncertain: ' + value);\n            }\n        });\n    },\n\n    /**\n     * Return whether the specified object is NOT owned by the specified user.\n     *\n     * @returns {Function} predicate\n     */\n    isForeignObject: function(owner) {\n        if (_.isNil(owner)) {\n            return _.stubFalse();\n        }\n\n        function predicate(object) {\n            if (!object) {\n                return false;\n            }\n\n            if (!_.isNil(object.owner)) {\n                // object.owner and owner should be the same type.\n                return object.owner !== owner;\n            }\n\n            if (_.isObject(object.meta)) {\n                // It's a sails-ember-blueprint situation!\n                // We need to test\n            }\n\n            //sails.log.verbose('object', object);\n            //sails.log.verbose('object.owner: ', object.owner, ', owner:', owner);\n        }\n\n        return function(object) {\n            predicate(object);\n        };\n    },\n\n    /**\n     * Find objects that some arbitrary action would be performed on, given the\n     * same request.\n     *\n     * @param options.model\n     * @param options.query\n     *\n     * TODO this will be less expensive when waterline supports a caching layer\n     */\n    findTargetObjects: function(req) {\n        // handle add/remove routes that have :parentid as the primary key field\n        let originalId;\n        if (req.params.parentid) {\n            originalId = req.params.id;\n            req.params.id = req.params.parentid;\n        }\n\n        return new Promise(function(resolve, reject) {\n            sails.hooks.blueprints.middleware.find(req, {\n                ok: resolve,\n                serverError: reject,\n                // this isn't perfect, since it returns a 500 error instead of a 404 error\n                // but it is better than crashing the app when a record doesn't exist\n                notFound: reject\n            });\n        })\n            .then(function(result) {\n                if (originalId !== undefined) {\n                    req.params.id = originalId;\n                }\n                return result;\n            });\n    },\n\n    /**\n     * Query Permissions that grant privileges to a role/user on an action for a\n     * model.\n     *\n     * @param options.method\n     * @param options.model\n     * @param options.user\n     */\n    findModelPermissions: function(options) {\n        const action = PermissionService.getMethod(options.method);\n\n        //console.log('findModelPermissions options', options)\n        //console.log('findModelPermissions action', action)\n\n        return User.findOne(options.user.id)\n            .populate('roles')\n            .then(function(user) {\n                const permissionCriteria = {\n                    model: options.model.id,\n                    action: action,\n                    or: [\n                        {role: _.pluck(user.roles, 'id')},\n                        {user: user.id}\n                    ]\n                };\n\n                return Permission.find(permissionCriteria).populate('criteria')\n            });\n    },\n\n    /**\n     * Given a list of objects, determine if they all satisfy at least one permission's\n     * where clause/attribute blacklist combination\n     *\n     * @param {Array of objects} objects - The result of the query, or if the action is create,\n     * the body of the object to be created\n     * @param {Array of Permission objects} permissions - An array of permission objects\n     * that are relevant to this particular user query\n     * @param {Object} attributes - The body of the request, in an update or create request.\n     * The keys of this object are checked against the permissions blacklist\n     * @returns boolean - True if there is at least one granted permission that allows the requested action,\n     * otherwise false\n     */\n    hasPassingCriteria: function(objects, permissions, attributes, user) {\n        // return success if there are no permissions or objects\n        if (_.isEmpty(permissions) || _.isEmpty(objects)) {\n            return true;\n        }\n\n        if (!_.isArray(objects)) {\n            objects = [objects];\n        }\n\n        let criteria = permissions.reduce(function(memo, perm) {\n            if (perm) {\n                if (!perm.criteria || perm.criteria.length == 0) {\n                    // If a permission has no criteria then it passes for all cases\n                    // (like the admin role)\n                    memo = memo.concat([{where: {}}]);\n                }\n                else {\n                    memo = memo.concat(perm.criteria);\n                }\n                if (perm.relation === 'owner') {\n                    perm.criteria.forEach(function(criteria) {\n                        criteria.owner = true;\n                    });\n                }\n                return memo;\n            }\n        }, []);\n\n\n        if (!_.isArray(criteria)) {\n            criteria = [criteria];\n        }\n\n        if (_.isEmpty(criteria)) {\n            return true;\n        }\n\n        // every object must have at least one permission that has a passing criteria and a passing attribute check\n        return objects.every(function(obj) {\n            return criteria.some(function(criteria) {\n                const match = wlFilter([obj], {\n                    where: criteria.where\n                }).results;\n                let hasUnpermittedAttributes = PermissionService.hasUnpermittedAttributes(attributes, criteria.blacklist);\n                let hasOwnership = true; // edge case for scenario where a user has some permissions that are owner based and some that are role based\n\n                if (criteria.owner) {\n                    hasOwnership = !PermissionService.hasForeignObjects(obj, user);\n                }\n\n                return match.length === 1 && !hasUnpermittedAttributes && hasOwnership;\n            });\n        });\n\n    },\n\n    hasUnpermittedAttributes: function(attributes, blacklist) {\n        if (_.isEmpty(attributes) || _.isEmpty(blacklist)) {\n            return false;\n        }\n        return _.intersection(Object.keys(attributes), blacklist).length ? true : false;\n    },\n\n    /**\n     * Return true if the specified model supports the ownership policy; false\n     * otherwise.\n     */\n    hasOwnershipPolicy: function(model) {\n        return model.autoCreatedBy;\n    },\n\n    /**\n     * Build an error message\n     */\n    getErrorMessage: function(options) {\n        const user = options.user.email || options.user.username;\n        return [\n            'User', user, 'is not permitted to', options.method, options.model.name\n        ].join(' ');\n    },\n\n    /**\n     * Given an action, return the CRUD method it maps to.\n     */\n    getMethod: function(method) {\n        return methodMap[method];\n    },\n\n    /**\n     * create a new role\n     * @param options\n     * @param options.name {string} - role name\n     * @param options.permissions {permission object, or array of permissions objects}\n     * @param options.permissions.model {string} - the name of the model that the permission is associated with\n     * @param options.permissions.criteria - optional criteria object\n     * @param options.permissions.criteria.where - optional waterline query syntax object for specifying permissions\n     * @param options.permissions.criteria.blacklist {string array} - optional attribute blacklist\n     * @param options.users {array of user names} - optional array of user ids that have this role\n     */\n    createRole: function(options) {\n\n        let ok = Promise.resolve();\n        let permissions = options.permissions;\n\n        if (!_.isArray(permissions)) {\n            permissions = [permissions];\n        }\n\n\n        // look up the model id based on the model name for each permission, and change it to an id\n        ok = ok.then(function() {\n            return Promise.all(permissions.map(function(permission) {\n                return Model.findOne({\n                    name: permission.model\n                })\n                    .then(function(model) {\n                        permission.model = model.id;\n                        return permission;\n                    });\n            }));\n        });\n\n        // look up user ids based on usernames, and replace the names with ids\n        ok = ok.then(function(permissions) {\n            if (options.users) {\n                return User.find({\n                    username: options.users\n                })\n                    .then(function(users) {\n                        options.users = users;\n                    });\n            }\n        });\n\n        ok = ok.then(function(users) {\n            return Role.create(options);\n        });\n\n        return ok;\n    },\n\n    /**\n     *\n     * @param options {permission object, or array of permissions objects}\n     * @param options.role {string} - the role name that the permission is associated with,\n     *                                either this or user should be supplied, but not both\n     * @param options.user {string} - the user than that the permission is associated with,\n     *                                either this or role should be supplied, but not both\n     * @param options.model {string} - the model name that the permission is associated with\n     * @param options.action {string} - the http action that the permission allows\n     * @param options.criteria - optional criteria object\n     * @param options.criteria.where - optional waterline query syntax object for specifying permissions\n     * @param options.criteria.blacklist {string array} - optional attribute blacklist\n     */\n    grant: function(permissions) {\n        if (!_.isArray(permissions)) {\n            permissions = [permissions];\n        }\n\n        // look up the models based on name, and replace them with ids\n        let ok = Promise.all(permissions.map(function(permission) {\n            const findRole = permission.role ? Role.findOne({\n                    name: permission.role\n                }) : null;\n            const findUser = permission.user ? User.findOne({\n                    username: permission.user\n                }) : null;\n            return Promise.all([findRole, findUser, Model.findOne({\n                name: permission.model\n            })])\n                .then(([role, user, model]) => {\n                    permission.model = model.id;\n                    if (role && role.id) {\n                        permission.role = role.id;\n                    } else if (user && user.id) {\n                        permission.user = user.id;\n                    } else {\n                        return Promise.reject(new Error('no role or user specified'));\n                    }\n                });\n        }));\n\n        ok = ok.then(function() {\n            return Permission.create(permissions);\n        });\n\n        return ok;\n    },\n\n    /**\n     * add one or more users to a particular role\n     * TODO should this work with multiple roles?\n     * @param usernames {string or string array} - list of names of users\n     * @param rolename {string} - the name of the role that the users should be added to\n     */\n    addUsersToRole: function(usernames, rolename) {\n        if (_.isEmpty(usernames)) {\n            return Promise.reject(new Error('One or more usernames must be provided'));\n        }\n\n        if (!_.isArray(usernames)) {\n            usernames = [usernames];\n        }\n\n        return Role.findOne({\n            name: rolename\n        }).populate('users').then(function(role) {\n            return User.find({\n                username: usernames\n            }).then(function(users) {\n                role.users.add(_.pluck(users, 'id'));\n                return role.save();\n            });\n        });\n    },\n\n    /**\n     * remove one or more users from a particular role\n     * TODO should this work with multiple roles\n     * @params usernames {string or string array} - name or list of names of users\n     * @params rolename {string} - the name of the role that the users should be removed from\n     */\n    removeUsersFromRole: function(usernames, rolename) {\n        if (_.isEmpty(usernames)) {\n            return Promise.reject(new Error('One or more usernames must be provided'));\n        }\n\n        if (!_.isArray(usernames)) {\n            usernames = [usernames];\n        }\n\n        return Role.findOne({\n            name: rolename\n        })\n            .populate('users')\n            .then(function(role) {\n                return User.find({\n                    username: usernames\n                }, {\n                    select: ['id']\n                }).then(function(users) {\n                    users.map(function(user) {\n                        role.users.remove(user.id);\n                    });\n                    return role.save();\n                });\n            });\n    },\n\n    /**\n     * revoke permission from role\n     * @param options\n     * @param options.role {string} - the name of the role related to the permission.  This, or options.user should be set, but not both.\n     * @param options.user {string} - the name of the user related to the permission.  This, or options.role should be set, but not both.\n     * @param options.model {string} - the name of the model for the permission\n     * @param options.action {string} - the name of the action for the permission\n     * @param options.relation {string} - the type of the relation (owner or role)\n     */\n    revoke: function(options) {\n        const findRole = options.role ? Role.findOne({\n                name: options.role\n            }) : null;\n        const findUser = options.user ? User.findOne({\n                username: options.user\n            }) : null;\n        let ok = Promise.all([findRole, findUser, Model.findOne({\n            name: options.model\n        })]);\n\n        ok = ok.then(([role, user, model]) => {\n\n            const query = {\n                model: model.id,\n                action: options.action,\n                relation: options.relation\n            };\n\n            if (role && role.id) {\n                query.role = role.id;\n            } else if (user && user.id) {\n                query.user = user.id;\n            } else {\n                return Promise.reject(new Error('You must provide either a user or role to revoke the permission from'));\n            }\n\n            return Permission.destroy(query);\n        });\n\n        return ok;\n    },\n\n    /**\n     * Check if the user (out of role) is granted to perform action on given objects\n     * @param objects\n     * @param user\n     * @param action\n     * @param model\n     * @param body\n     * @returns {*}\n     */\n    isAllowedToPerformAction: function(objects, user, action, model, body) {\n        if (!_.isArray(objects)) {\n            return PermissionService.isAllowedToPerformSingle(user.id, action, model, body)(objects);\n        }\n\n        return Promise.all(objects.map(PermissionService.isAllowedToPerformSingle(user.id, action, model, body)))\n            .then(function(allowedArray) {\n                return allowedArray.every(function(allowed) {\n                    return allowed === true;\n                });\n            });\n    },\n\n    /**\n     * Resolve if the user have the permission to perform this action\n     * @param user\n     * @param action\n     * @param model\n     * @param body\n     * @returns {Function}\n     */\n    isAllowedToPerformSingle: function(user, action, model, body) {\n        return function(obj) {\n            return new Promise(function(resolve, reject) {\n                Model.findOne({\n                    identity: model\n                }).then(function(model) {\n                    return Permission.find({\n                        model: model.id,\n                        action: action,\n                        relation: 'user',\n                        user: user\n                    }).populate('criteria');\n                }).then(function(permission) {\n                    if (permission.length > 0 && PermissionService.hasPassingCriteria(obj, permission, body)) {\n                        resolve(true);\n                    } else {\n                        resolve(false);\n                    }\n                }).catch(reject);\n            });\n        };\n    }\n};\n"]}